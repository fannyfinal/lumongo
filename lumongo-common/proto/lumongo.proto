option java_generic_services = true;

option java_package = "org.lumongo.cluster.message";

service ExternalService {
	rpc Query (QueryRequest) returns (QueryResponse);
	rpc Store (StoreRequest) returns (StoreResponse);
	rpc Delete (DeleteRequest) returns (DeleteResponse);
	rpc BatchDelete (BatchDeleteRequest) returns (BatchDeleteResponse);
	rpc Fetch (FetchRequest) returns (FetchResponse);
	rpc BatchFetch (BatchFetchRequest) returns (BatchFetchResponse);
	rpc CreateIndex (IndexCreateRequest) returns (IndexCreateResponse);
	rpc ChangeIndex (IndexSettingsRequest) returns (IndexSettingsResponse);
	rpc DeleteIndex (IndexDeleteRequest) returns (IndexDeleteResponse);
	rpc GetIndexes (GetIndexesRequest) returns (GetIndexesResponse);
	rpc GetNumberOfDocs (GetNumberOfDocsRequest) returns (GetNumberOfDocsResponse);
	rpc Clear (ClearRequest) returns (ClearResponse);
	rpc Optimize (OptimizeRequest) returns (OptimizeResponse);
	rpc GetFieldNames (GetFieldNamesRequest) returns (GetFieldNamesResponse);
	rpc GetTerms (GetTermsRequest) returns (GetTermsResponse);
	rpc GetMembers (GetMembersRequest) returns (GetMembersResponse);
}


service InternalService {
	rpc Query (QueryRequest) returns (InternalQueryResponse);
	rpc Store (StoreRequest) returns (StoreResponse);
	rpc Fetch (FetchRequest) returns (FetchResponse);
	rpc Delete (DeleteRequest) returns (DeleteResponse);
	rpc GetNumberOfDocs (GetNumberOfDocsRequest) returns (GetNumberOfDocsResponse);
	rpc Clear (ClearRequest) returns (ClearResponse);
	rpc Optimize (OptimizeRequest) returns (OptimizeResponse);
	rpc GetFieldNames (GetFieldNamesRequest) returns (GetFieldNamesResponse);
	rpc GetTerms (GetTermsRequest) returns (GetTermsResponse);
}

message GetMembersRequest {
}

message LMMember {
	required string serverAddress = 1;
	required uint32 externalPort = 2;
	optional uint32 internalPort = 3;
	optional uint32 hazelcastPort = 4;
	optional uint32 restPort = 5;
}

message GetMembersResponse {
	repeated LMMember member = 1;
	repeated IndexMapping indexMapping = 2;
}

message IndexMapping {
	required string indexName = 1;
	required uint32 numberOfSegments = 2;
	repeated SegmentMapping segmentMapping = 3;
}

message SegmentMapping {
	required uint32 segmentNumber = 1;
	required LMMember member = 2;
}

message GetTermsRequest {
	required string indexName = 1;
	required string fieldName = 2;
	required uint32 amount = 3;
	optional string startingTerm = 4;
	optional uint32 minDocFreq = 5 [default = 1];
	optional string termFilter = 7;
	optional string termMatch = 8;
}

message GetTermsResponse {
	repeated Term term = 1;
	optional Term lastTerm = 2;
}

message Term {
	required string value = 1;
	optional uint64 docFreq = 2;
}

message GetFieldNamesRequest {
	required string indexName = 1;
}

message GetFieldNamesResponse {
	repeated string fieldName = 1;
}

message ClearRequest {
	required string indexName = 1;
}

message ClearResponse {
}

message OptimizeRequest {
	required string indexName = 1;
}

message OptimizeResponse {
}

message GetIndexesRequest {
}

message GetIndexesResponse {
	repeated string indexName = 1;
}

message GetNumberOfDocsRequest {
	required string indexName = 1;
}

message GetNumberOfDocsResponse {
	required uint64 numberOfDocs = 1;
	repeated SegmentCountResponse segmentCountResponse = 2;
}

message SegmentCountResponse {
	required uint32 segmentNumber = 1;
	required uint32 numberOfDocs = 2;
}

message IndexCreateRequest {
	required string indexName = 1;
	required uint32 numberOfSegments = 2;
	required IndexSettings indexSettings = 3;
}

message IndexCreateResponse {
}

message IndexSettingsRequest {
	required string indexName = 1;
	required IndexSettings indexSettings = 4;
}

enum LMAnalyzer {
	KEYWORD = 1;
	LC_KEYWORD = 2;
	WHITESPACE = 3;
	LC_WHITESPACE = 4;
	STANDARD = 5;
	NUMERIC_INT = 6;
	NUMERIC_LONG = 7;
	NUMERIC_FLOAT = 8;
	NUMERIC_DOUBLE = 9;
	STANDARD_FOLDING = 10;
	STANDARD_NO_STOP = 11;
	STANDARD_FOLDING_NO_STOP = 12;
	DATE = 13;
	LSH = 14;
}

message IndexSettings {
	optional string defaultSearchField = 1;
	repeated FieldConfig fieldConfig = 2;
	optional bool applyUncommittedDeletes = 3 [default = true];
	optional double requestFactor = 4 [default = 2.0];
	optional uint32 minSegmentRequest = 5 [default = 2];
	optional uint32 commitInterval = 6 [default = 30];
	optional double segmentTolerance = 9 [default = 0.05];
	optional uint32 segmentQueryCacheSize = 11 [default = 512];
	optional uint32 segmentQueryCacheMaxAmount = 12 [default = 256];
	optional bool storeDocumentInIndex = 13 [default = false];
	optional bool storeDocumentInMongo = 14 [default = true];
}

message FieldConfig {
	required string storedFieldName = 1;
	repeated IndexAs indexAs = 2;
	repeated FacetAs facetAs = 3;
	repeated SortAs sortAs = 4;
}

message IndexAs {
	required string indexFieldName = 1;
	required LMAnalyzer analyzer = 2;
}

message FacetAs {
	enum LMFacetType {
		STANDARD = 1;
		DATE_YYYY_MM_DD = 2;
		DATE_YYYYMMDD = 3;
	}
	required string facetName = 1;
	required LMFacetType facetType = 2;
}

message SortAs {
	enum SortType {
		STRING = 1;
		NUMERIC_INT = 2;
		NUMERIC_LONG = 3;
		NUMERIC_FLOAT = 4;
		NUMERIC_DOUBLE = 5;
		DATE = 6;
		STRING_LC = 7;
		STRING_FOLDING = 8;
		STRING_LC_FOLDING = 9;
	}
	required string sortFieldName = 1;
	required SortType sortType = 2;
}

message IndexSettingsResponse {
}

message IndexDeleteRequest {
	required string indexName = 1;
}

message IndexDeleteResponse {
}

message StoreRequest {
	required string uniqueId = 1;
	required string indexName = 2;
	optional ResultDocument resultDocument = 3;
	repeated AssociatedDocument associatedDocument = 4;
	optional bool clearExistingAssociated = 5 [default = false];
}

message StoreResponse {
}

message LMDoc {
	repeated LMField indexedField = 1;
	repeated LMFacet facet = 2;
	optional int64 timestamp = 3;
}

message LMFacet {
	required string label = 1;
	optional string path = 2;
}

message LMField {
	required string fieldName = 1;
	repeated string fieldValue = 2;
	repeated int32 intValue = 3;
	repeated int64 longValue = 4;
	repeated float floatValue = 5;
	repeated double doubleValue = 6;
}

message ResultDocument {
	required string uniqueId = 1;
	required string indexName = 2;
	optional bytes document = 3;
	repeated Metadata metadata = 4;
	optional int64 timestamp = 5;
}

message AssociatedDocument {
	required string filename = 1;
	required string documentUniqueId = 2;
	required string indexName = 3;
	optional bytes document = 4;
	optional bool compressed = 5 [default = false];
	repeated Metadata metadata = 6;
	optional int64 timestamp = 7;
}

message Metadata {
	required string key = 1;
	required string value = 2;
}

message ScoredResult {
	optional string uniqueId = 1;
	optional float score = 2;//
	optional uint32 docId = 3;//
	optional string indexName = 4;
	optional uint32 segment = 5;//
	optional uint32 resultIndex = 6;
	optional SortValues sortValues = 7;//
	optional int64 timestamp = 8;
	optional ResultDocument resultDocument = 9;
}

message SortValues {
	repeated SortValue sortValue = 1;
}

message SortValue {
	required bool exists = 1;
	optional string stringValue = 7;
	optional int32 integerValue = 8;
	optional int64 longValue = 9;
	optional float floatValue = 10;
	optional double doubleValue = 11;
	optional int64 dateValue = 12;
}

message SortRequest {
	repeated FieldSort fieldSort = 1;
}

message FieldSort {
	enum Direction {
		ASCENDING = 1;
		DESCENDING = 2;
	};

	required string sortField = 1;
	optional Direction direction = 2 [default = ASCENDING];
}

message FacetGroup {
	required CountRequest countRequest = 1;
	repeated FacetCount facetCount = 2;
	optional bool possibleMissing = 3 [default = false];
	optional uint64 maxValuePossibleMissing = 4 [ default = 0];
}

message FacetCount {
	required string facet = 1;
	required uint64 count = 2;
	optional uint64 maxError = 3;
}

message FacetRequest {
	repeated CountRequest countRequest = 1;
	repeated LMFacet drillDown = 2;
}

message CountRequest {
	required LMFacet facetField = 1;
	optional uint32 maxFacets = 2 [default = 10];
	optional uint32 segmentFacets = 3;
	optional bool computeError = 4 [default = true];
	optional bool computePossibleMissed = 5 [default = true];
}

message SegmentResponse {
	required uint32 segmentNumber = 1;
	required string indexName = 2;
	required uint32 totalHits = 3;
	repeated ScoredResult scoredResult = 4;
	optional ScoredResult next = 5;
	repeated FacetGroup facetGroup = 6;
}

message LastIndexResult {
	required string indexName = 1;
	repeated ScoredResult lastForSegment = 2;
}

message LastResult {
	repeated LastIndexResult lastIndexResult = 1;
}

message InternalQueryResponse {
	repeated IndexSegmentResponse indexSegmentResponse = 1;
}

message IndexSegmentResponse {
	required string indexName = 1;
	repeated SegmentResponse segmentReponse = 2;
}


message QueryRequest {
	enum Operator {
		AND = 1;
		OR = 2;
	}

	repeated string index = 1;
	optional string query = 2;
	required uint32 amount = 3;
	optional LastResult lastResult = 4;
	optional bool fetchFull = 5 [default = false];
	optional FacetRequest facetRequest = 7;
	optional SortRequest sortRequest = 8;
	repeated string queryField = 9;
	repeated string filterQuery = 10;
	repeated string fields = 11;
	optional FetchType resultFetchType = 12 [default = NONE];
	optional uint32 minimumNumberShouldMatch = 13 [default = 0];
	optional Operator defaultOperator = 14 [default = OR];
	repeated string documentFields = 15;
	repeated string documentMaskedFields = 16;
	optional uint32 start = 17;
}

message QueryResponse {
	required uint64 totalHits = 1;
	repeated ScoredResult results = 2;
	required LastResult lastResult = 3;
	repeated FacetGroup facetGroup = 4;
}

message DeleteRequest {
	required string indexName = 1;
	required string uniqueId = 2;
	optional string filename = 3;
	optional bool deleteDocument = 4 [default = true];
	optional bool deleteAllAssociated = 5 [default = true];
}

message DeleteResponse {
}

message BatchDeleteRequest {
	repeated DeleteRequest request = 1;
}

message BatchDeleteResponse {
}



message BatchFetchRequest {
	repeated FetchRequest fetchRequest = 1;
}

message BatchFetchResponse {
	repeated FetchResponse fetchResponse = 1;
}

enum FetchType {
	FULL = 1;
	META = 2;
	NONE = 3;
}

message FetchRequest {
	required string uniqueId = 1;
	required string indexName = 2;
	optional string fileName = 3;
	optional FetchType resultFetchType = 4 [default = FULL];
	optional FetchType associatedFetchType = 5 [default = META];
	repeated string documentFields = 6;
	repeated string documentMaskedFields = 7;
	optional int64 timestamp = 8;
}

message FetchResponse {
	optional ResultDocument resultDocument = 1;
	repeated AssociatedDocument associatedDocument = 2;
}





